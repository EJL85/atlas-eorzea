'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _cleanReactProps = require('clean-react-props');

var _cleanReactProps2 = _interopRequireDefault(_cleanReactProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Canvas = function (_Component) {
  _inherits(Canvas, _Component);

  function Canvas() {
    _classCallCheck(this, Canvas);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  Canvas.prototype.componentDidMount = function componentDidMount() {
    this.draw(this.props);
  };

  Canvas.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    this.draw(nextProps);
  };

  Canvas.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
    return false;
  };

  Canvas.prototype.draw = function draw(props) {
    if (!this.canvas) {
      return;
    }

    props.draw(this.canvas);
  };

  Canvas.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props,
        canvasRef = _props.canvasRef,
        width = _props.width,
        height = _props.height,
        pixelRatioAware = _props.pixelRatioAware;


    var pixelRatio = pixelRatioAware ? window.devicePixelRatio || 1 : 1;

    var ref = canvasRef ? canvasRef : function (element) {
      _this2.canvas = element;
    };

    return _react2.default.createElement('canvas', _extends({}, (0, _cleanReactProps2.default)(this.props, ['width', 'height']), {
      ref: ref,
      width: width * pixelRatio,
      height: height * pixelRatio,
      style: { width: width, height: height }
    }));
  };

  return Canvas;
}(_react.Component);

Canvas.propTypes = {
  canvasRef: _propTypes2.default.func,
  draw: _propTypes2.default.func,
  width: _propTypes2.default.number,
  height: _propTypes2.default.number,
  pixelRatioAware: _propTypes2.default.bool
};

Canvas.defaultProps = {
  draw: function draw() {},
  width: 30,
  height: 30,
  pixelRatioAware: true
};

exports.default = Canvas;